(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
"use strict";

var Renderer = require("./Renderer").Renderer;

global.app = function () {
  var renderer = new Renderer();
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9maWxsZS9HaXRodWIvVE5NMDg0X2xhYjMvc3JjL2FwcC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7SUFBUyxRQUFRLFdBQVEsWUFBWSxFQUE1QixRQUFROztBQUVqQixNQUFNLENBQUMsR0FBRyxHQUFHLFlBQVk7QUFDdkIsTUFBSSxRQUFRLEdBQUcsSUFBSSxRQUFRLEVBQUUsQ0FBQztDQUMvQixDQUFDIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZW5kZXJlciB9IGZyb20gJy4vUmVuZGVyZXInO1xuXG5nbG9iYWwuYXBwID0gZnVuY3Rpb24gKCkge1xuICBsZXQgcmVuZGVyZXIgPSBuZXcgUmVuZGVyZXIoKTtcbn07XG4iXX0=
},{"./Renderer":2}],2:[function(require,module,exports){
"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

Object.defineProperty(exports, "__esModule", {
  value: true
});

var LoadShaders = require("./ShaderLoader").LoadShaders;

var gl = null;

var Renderer = exports.Renderer = (function () {
  function Renderer() {
    var _this = this;

    _classCallCheck(this, Renderer);

    this.canvas = null;
    this.buffer;
    this.vertex_shader;
    this.fragment_shader;
    //this.tracerProgram;
    this.renderProgram;
    this.vertex_position;
    this.timeLocation;
    this.resolutionLocation;
    this.mousePositionLocation;
    this.parameters = { start_time: new Date().getTime(), time: 0, screenWidth: 0, screenHeight: 0, samples: 0 };

    this.samplesLocation;
    this.renderSamplesLocation;

    this.vertexBuffer = null;
    this.frameBuffer = null;
    this.fb = null;
    this.textures = [];
    this.tracerProgram = null;
    this.renderVertexAttribute = null;

    this.triangleTexture = null;

    this.mousePosition = { x: 0, y: 0 };

    this.init();

    this.animate = function (time) {
      _this.resizeCanvas();
      gl.viewport(0, 0, _this.canvas.width, _this.canvas.height);

      // render to texture
      gl.useProgram(_this.tracerProgram);

      var location1 = gl.getUniformLocation(_this.tracerProgram, "u_buffer_texture");
      var location2 = gl.getUniformLocation(_this.tracerProgram, "u_triangle_texture");

      gl.uniform1i(location1, 0);
      gl.uniform1i(location2, 1);

      gl.activeTexture(gl.TEXTURE0);
      gl.bindTexture(gl.TEXTURE_2D, _this.textures[0]);
      gl.activeTexture(gl.TEXTURE1);
      gl.bindTexture(gl.TEXTURE_2D, _this.triangleTexture);

      gl.bindBuffer(gl.ARRAY_BUFFER, _this.vertexBuffer);
      gl.bindFramebuffer(gl.FRAMEBUFFER, _this.fb);
      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, _this.textures[1], 0);
      gl.vertexAttribPointer(_this.tracerVertexAttribute, 2, gl.FLOAT, false, 0, 0);
      gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
      gl.bindFramebuffer(gl.FRAMEBUFFER, null);

      _this.parameters.time = new Date().getTime() - _this.parameters.start_time;
      _this.parameters.samples += 1;

      gl.uniform1f(_this.timeLocation, _this.parameters.time / 1000);
      gl.uniform1f(_this.samplesLocation, _this.parameters.samples);
      gl.uniform2f(_this.resolutionLocation, _this.parameters.screenWidth, _this.parameters.screenHeight);
      gl.uniform2f(_this.mousePositionLocation, _this.mousePosition.x, _this.mousePosition.y);

      _this.textures.reverse();

      gl.useProgram(_this.renderProgram);
      gl.bindTexture(gl.TEXTURE_2D, _this.textures[0]);
      gl.bindBuffer(gl.ARRAY_BUFFER, _this.vertexBuffer);
      gl.vertexAttribPointer(_this.renderVertexAttribute, 2, gl.FLOAT, false, 0, 0);
      gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
      gl.uniform1f(_this.renderSamplesLocation, _this.parameters.samples);

      requestAnimationFrame(_this.animate);
    };
  }

  _createClass(Renderer, {
    createRenderProgram: {
      value: function createRenderProgram() {
        var vertices = [-1, -1, -1, 1, 1, -1, 1, 1];
        this.vertexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);

        //this.frameBuffer = gl.createFramebuffer();
        this.fb = gl.createFramebuffer();

        var type = gl.getExtension("OES_texture_float") ? gl.FLOAT : gl.UNSIGNED_BYTE;
        this.textures = [];
        for (var i = 0; i < 2; i++) {
          this.textures.push(gl.createTexture());
          gl.bindTexture(gl.TEXTURE_2D, this.textures[i]);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, 512, 512, 0, gl.RGB, type, null);
        }
        gl.bindTexture(gl.TEXTURE_2D, null);

        // create render shader
        var render_vertex_shader = document.getElementById("vs_render").textContent;
        var render_fragment_shader = document.getElementById("fs_render").textContent;
        this.renderProgram = this.createProgram(render_vertex_shader, render_fragment_shader);
        this.renderVertexAttribute = gl.getAttribLocation(this.renderProgram, "vertex");
        gl.enableVertexAttribArray(this.renderVertexAttribute);
      }
    },
    allocateTexture: {
      value: function allocateTexture() {
        this.triangleTexture = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_2D, this.triangleTexture);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
      }
    },
    addSceneTextures: {
      value: function addSceneTextures(triangleArray) {
        this.allocateTexture();
        var width = 1024;
        var height = 1024;
        var format = gl.RGB;

        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, width, height, 0, format, gl.FLOAT, triangleArray);
      }
    },
    init: {
      value: function init() {
        var _this = this;

        console.log("init renderer");
        LoadShaders(["./dist/kernels/header.glsl", "./dist/kernels/cellular3D.glsl", "./dist/kernels/noise3D.glsl", "./dist/kernels/main.glsl"], function (kernelData) {
          _this.fragment_shader = kernelData;
          _this.vertex_shader = document.getElementById("vs").textContent;
          _this.canvas = document.querySelector("canvas");

          // Initialise WebGL
          try {
            gl = _this.canvas.getContext("experimental-webgl");
          } catch (error) {}
          if (!gl) throw "cannot create webgl context";

          _this.createRenderProgram();

          // Create Vertex buffer (2 triangles)
          _this.buffer = gl.createBuffer();
          gl.bindBuffer(gl.ARRAY_BUFFER, _this.buffer);
          gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1, -1, -1, 1, 1, -1, 1, -1, 1, 1, -1, 1]), gl.STATIC_DRAW);

          // Create Program
          _this.tracerProgram = _this.createProgram(_this.vertex_shader, _this.fragment_shader);
          _this.tracerVertexAttribute = gl.getAttribLocation(_this.tracerProgram, "vertex");
          gl.enableVertexAttribArray(_this.tracerVertexAttribute);

          _this.timeLocation = gl.getUniformLocation(_this.tracerProgram, "time");
          _this.samplesLocation = gl.getUniformLocation(_this.tracerProgram, "samples");
          _this.resolutionLocation = gl.getUniformLocation(_this.tracerProgram, "resolution");
          _this.mousePositionLocation = gl.getUniformLocation(_this.tracerProgram, "mousePosition");
          _this.renderSamplesLocation = gl.getUniformLocation(_this.renderProgram, "samples");

          _this.animate();
        }, function () {});

        $("#render-canvas").mousemove(function (event) {
          _this.mousePosition.x = event.pageX;
          _this.mousePosition.y = event.pageY;
        });
      }
    },
    createProgram: {
      value: function createProgram(vertex, fragment) {
        var program = gl.createProgram();

        var vs = this.createShader(vertex, gl.VERTEX_SHADER);
        var fs = this.createShader(fragment, gl.FRAGMENT_SHADER);

        gl.attachShader(program, vs);
        gl.attachShader(program, fs);

        gl.deleteShader(vs);
        gl.deleteShader(fs);

        gl.linkProgram(program);

        var log = gl.getProgramInfoLog(program);
        if (log) {
          console.log(log);
        }

        log = gl.getShaderInfoLog(vs);
        if (log) {
          console.log(log);
        }

        log = gl.getShaderInfoLog(fs);
        if (log) {
          console.log(log);
        }

        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
          return null;
        }

        return program;
      }
    },
    createShader: {
      value: function createShader(src, type) {
        var shader = gl.createShader(type);

        gl.shaderSource(shader, src);
        gl.compileShader(shader);

        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
          return null;
        }
        return shader;
      }
    },
    resizeCanvas: {
      value: function resizeCanvas(event) {
        if (this.canvas.width != this.canvas.clientWidth || this.canvas.height != this.canvas.clientHeight) {
          this.canvas.width = this.canvas.clientWidth;
          this.canvas.height = this.canvas.clientHeight;

          this.parameters.screenWidth = this.canvas.width;
          this.parameters.screenHeight = this.canvas.height;

          gl.viewport(0, 0, this.canvas.width, this.canvas.height);
        }
      }
    }
  });

  return Renderer;
})();

},{"./ShaderLoader":3}],3:[function(require,module,exports){
"use strict";

exports.LoadShaders = LoadShaders;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function LoadShader(fileName, index, callback) {
  jQuery.get(fileName, function (data) {
    callback(data, index);
  });
}

function LoadShaders(fileNames, callback, errorCallback) {
  var loaded_files = 0;
  var shader_files = [];
  for (var file_index = 0; file_index < fileNames.length; file_index++) {
    LoadShader(fileNames[file_index], file_index, function (data, shader_index) {
      shader_files[shader_index] = data;

      loaded_files++;
      if (loaded_files == fileNames.length) {
        var total_shader_data = "";
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = shader_files[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var shader_data = _step.value;

            total_shader_data += shader_data;
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"]) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        callback(total_shader_data);
      }
    });
  }
}

},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
